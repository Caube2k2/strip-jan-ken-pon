{"version":3,"sources":["model.ts","context.ts","components/ChoiceImg/ChoiceImg.tsx","screens/ChoiceScreen/ChoiceScreen.style.tsx","screens/ChoiceScreen/ChoiceScreen.tsx","screens/ResultScreen/ResultScreen.style.tsx","screens/ResultScreen/ResultScreen.tsx","screens/VideoScreen/VideoScreen.tsx","screens/GameOverScreen/GameOverScreen.tsx","components/Video/Video.tsx","App/App.style.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["GameScreen","Choice","MatchResult","ActionType","defaultState","heart","clothes","screen","CHOICE","videoUrl","defaultContextValue","state","dispatch","AppContext","React","createContext","RotatedImg","styled","img","props","size","rotate","ChoiceImg","choice","ROCK","alt","src","SCISSOR","PAPER","Container","div","Choices","ChoiceButton","button","ChoiceScreen","useContext","select","useCallback","type","map","key","onClick","BotChoice","ResultContainer","PlayerChoice","ResultScreen","botChoice","playerChoice","matchResult","next","CALCULATE","result","WIN","className","DRAW","LOSE","ButtonContainer","VideoScreen","skip","NEXT_ROUND","GameOverScreen","GAME_OVER_WIN","GAME_OVER_LOSE","RESTART","StyledVideo","video","Video","play","onVideoEnded","videoRef","useRef","useEffect","current","currentTime","pause","ref","onEnded","preload","HeartSection","ClothesSection","gameLogicReducer","action","choices","Math","ceil","random","length","getBotChoice","getMatchResult","RESULT","STRIP_VIDEO","App","useReducer","context","clothesArray","Array","fill","emptyHeart","heartArray","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.538f6582.chunk.js","sourcesContent":["export enum GameScreen {\n    CHOICE,\n    RESULT,\n    STRIP_VIDEO,\n    GAME_OVER_LOSE,\n    GAME_OVER_WIN,\n}\n\nexport enum Choice {\n    ROCK = 0,\n    PAPER = 1,\n    SCISSOR = 2,\n}\n\nexport enum MatchResult {\n    WIN,\n    LOSE,\n    DRAW,\n}\n\nexport interface GameState {\n    heart: number\n    clothes: number\n\n    screen: GameScreen\n    videoUrl: string\n\n    playerChoice?: Choice\n    botChoice?: Choice\n    matchResult?: MatchResult\n}\n\nexport enum ActionType {\n    CHOICE,\n    CALCULATE,\n\n    NEXT_ROUND,\n    RESTART,\n}\n\nexport type Action =\n    | {\n          type: ActionType.CHOICE\n          choice: Choice\n      }\n    | {type: ActionType.NEXT_ROUND}\n    | {type: ActionType.RESTART}\n    | {type: ActionType.CALCULATE}\n","import {GameState, GameScreen, Action} from './model'\nimport React from 'react'\n\nconst TOTAL_CLOTHES = 4\nconst TOTAL_HEART = 3\n\nexport const defaultState: GameState = {\n    heart: TOTAL_HEART,\n    clothes: TOTAL_CLOTHES,\n    screen: GameScreen.CHOICE,\n    videoUrl: `/videos/${TOTAL_CLOTHES}.mp4`,\n}\n\nexport interface ContextValue {\n    state: GameState\n    dispatch: (action: Action) => void\n}\n\nconst defaultContextValue: ContextValue = {\n    state: defaultState,\n    dispatch: () => {},\n}\n\nexport const AppContext = React.createContext(defaultContextValue)\n","import React from 'react'\nimport styled from 'styled-components'\nimport {Choice} from '../../model'\n\nconst RotatedImg = styled.img<{rotate: number; size: number}>`\n    width: ${(props) => props.size}px;\n    height: ${(props) => props.size}px;\n    transform: rotate(${(props) => props.rotate}deg);\n`\n\nexport const ChoiceImg = ({choice, size = 120}: {choice: Choice; size?: number}) => {\n    switch (choice) {\n        case Choice.ROCK:\n            return (\n                <RotatedImg\n                    rotate={-15}\n                    size={size}\n                    alt=\"rock\"\n                    src=\"https://img.icons8.com/color/96/000000/clenched-fist.png\"\n                />\n            )\n        case Choice.SCISSOR:\n            return (\n                <RotatedImg\n                    rotate={-80}\n                    size={size}\n                    alt=\"paper\"\n                    src=\"https://img.icons8.com/color/96/000000/hand-scissors.png\"\n                />\n            )\n        case Choice.PAPER:\n            return (\n                <RotatedImg\n                    rotate={15}\n                    size={size}\n                    alt=\"scissor\"\n                    src=\"https://img.icons8.com/color/96/000000/hand.png\"\n                />\n            )\n    }\n}\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n    position: relative;\n    height: 100vh;\n    /* background-image: url('/images/bg.jpg'); */\n`\n\nexport const Choices = styled.div`\n    position: absolute;\n    width: 100vw;\n    bottom: 10vh;\n    text-align: center;\n`\n\nexport const ChoiceButton = styled.button`\n    opacity: 0.8;\n    cursor: pointer;\n    background-color: transparent;\n    border: none;\n    transition: all 0.5s;\n\n    &:hover {\n        opacity: 1;\n        transform: translateY(-10px) scale(1.2);\n    }\n`\n","import React from 'react'\nimport {Choice, ActionType} from '../../model'\nimport {AppContext} from '../../context'\nimport {ChoiceImg} from '../../components/ChoiceImg/ChoiceImg'\n\nimport {Container, Choices, ChoiceButton} from './ChoiceScreen.style'\n\nexport const ChoiceScreen = () => {\n    const {dispatch} = React.useContext(AppContext)\n\n    const select = React.useCallback(\n        (choice: Choice) => {\n            dispatch({type: ActionType.CHOICE, choice})\n        },\n        [dispatch],\n    )\n\n    return (\n        <Container>\n            <Choices>\n                {[Choice.ROCK, Choice.SCISSOR, Choice.PAPER].map((choice) => (\n                    <ChoiceButton key={choice} onClick={() => select(choice)}>\n                        <ChoiceImg choice={choice} />\n                    </ChoiceButton>\n                ))}\n            </Choices>\n        </Container>\n    )\n}\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n    height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n`\n\nexport const BotChoice = styled.div`\n    transform: rotate(180deg);\n`\nexport const ResultContainer = styled.div`\n    margin: 20px;\n    font-size: 40px;\n`\nexport const PlayerChoice = styled.div`\n    margin-bottom: 32px;\n`\n","import React from 'react'\n\nimport {AppContext} from '../../context'\nimport {ChoiceImg} from '../../components/ChoiceImg/ChoiceImg'\nimport {MatchResult, ActionType} from '../../model'\nimport {BotChoice, ResultContainer, PlayerChoice, Container} from './ResultScreen.style'\n\nexport const ResultScreen = () => {\n    const {state, dispatch} = React.useContext(AppContext)\n\n    const {botChoice, playerChoice, matchResult} = state\n\n    const next = React.useCallback(() => dispatch({type: ActionType.CALCULATE}), [dispatch])\n\n    let result: JSX.Element = <span />\n    switch (matchResult!) {\n        case MatchResult.WIN:\n            result = <span className=\"nes-text is-success\"> Thắng rồi ahihi!!</span>\n            break\n        case MatchResult.DRAW:\n            result = <span className=\"nes-text is-primary\"> Hoà</span>\n            break\n        case MatchResult.LOSE:\n            result = <span className=\"nes-text is-error\"> Thua rùi lêu lêu!!</span>\n            break\n    }\n\n    return (\n        <Container>\n            <BotChoice>\n                <ChoiceImg size={240} choice={botChoice!} />\n            </BotChoice>\n\n            <ResultContainer>{result}</ResultContainer>\n\n            <PlayerChoice>\n                <ChoiceImg size={240} choice={playerChoice!} />\n            </PlayerChoice>\n\n            <button onClick={next} type=\"button\" className=\"nes-btn is-primary\">\n                Tiếp tục\n            </button>\n        </Container>\n    )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport {ActionType} from '../../model'\nimport {AppContext} from '../../context'\n\nconst ButtonContainer = styled.div`\n    position: absolute;\n    width: 100vw;\n    bottom: 10vh;\n    text-align: center;\n`\n\nexport const VideoScreen = () => {\n    const {dispatch} = React.useContext(AppContext)\n\n    const skip = React.useCallback(() => {\n        dispatch({type: ActionType.NEXT_ROUND})\n    }, [dispatch])\n\n    return (\n        <ButtonContainer>\n            <button type=\"button\" className=\"nes-btn is-primary\" onClick={skip}>\n                Skip, hông thèm coi\n            </button>\n        </ButtonContainer>\n    )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport {ActionType, GameScreen} from '../../model'\nimport {AppContext} from '../../context'\n\ninterface Props {\n    screen: GameScreen.GAME_OVER_WIN | GameScreen.GAME_OVER_LOSE\n}\n\nconst Container = styled.div`\n    display: flex;\n    height: 100vh;\n    align-items: center;\n    justify-content: center;\n`\n\nexport const GameOverScreen = ({screen}: Props) => {\n    const {dispatch} = React.useContext(AppContext)\n\n    return (\n        <Container>\n            <section className=\"message-list\">\n                <section className=\"message -left\">\n                    <i className=\"nes-octocat animate\"></i>\n\n                    <div className=\"nes-balloon from-left\">\n                        {screen === GameScreen.GAME_OVER_WIN && <p>Chúc mừng bạn đã chiến thắng ahihi!</p>}\n                        {screen === GameScreen.GAME_OVER_LOSE && <p>Thua rồi, nhục quá, chơi lại đi hihi!</p>}\n\n                        <button\n                            type=\"button\"\n                            className=\"nes-btn is-primary\"\n                            onClick={() => {\n                                dispatch({type: ActionType.RESTART})\n                            }}>\n                            Chơi lại\n                        </button>\n                    </div>\n                </section>\n            </section>\n        </Container>\n    )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface Props {\n    play?: boolean\n    videoUrl: string\n    onVideoEnded: () => void\n}\n\nconst StyledVideo = styled.video`\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n    opacity: 0.75;\n    object-fit: cover;\n    z-index: -1;\n`\n\nexport const Video = ({play, videoUrl, onVideoEnded}: Props) => {\n    const videoRef = React.useRef<HTMLVideoElement | null>(null)\n\n    React.useEffect(() => {\n        const video = videoRef.current\n        if (video) {\n            video.currentTime = 0\n\n            if (play) {\n                video.play()\n            }\n        }\n\n        return () => {\n            if (video) {\n                video.pause()\n            }\n        }\n    }, [play, videoRef])\n\n    return (\n        <StyledVideo key={videoUrl} ref={videoRef as any} onEnded={onVideoEnded} preload=\"auto\">\n            <source src={videoUrl} type=\"video/mp4\" />\n        </StyledVideo>\n    )\n}\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n    position: relative;\n    height: 100vh;\n`\n\nexport const HeartSection = styled.div`\n    z-index: 1;\n    position: absolute;\n    top: 5px;\n    left: 5px;\n\n    .heart {\n        width: 55px;\n        height: 55px;\n    }\n`\n\nexport const ClothesSection = styled.div`\n    z-index: 1;\n    position: absolute;\n    top: 5px;\n    right: 5px;\n\n    .clothes {\n        width: 60px;\n        height: 60px;\n    }\n`\n","import React from 'react'\nimport {GameState, GameScreen, Choice, MatchResult, Action, ActionType} from '../model'\nimport {defaultState, ContextValue, AppContext} from '../context'\nimport {ChoiceScreen} from '../screens/ChoiceScreen/ChoiceScreen'\nimport {ResultScreen} from '../screens/ResultScreen/ResultScreen'\nimport {VideoScreen} from '../screens/VideoScreen/VideoScreen'\nimport {GameOverScreen} from '../screens/GameOverScreen/GameOverScreen'\nimport {Video} from '../components/Video/Video'\nimport {Container, ClothesSection, HeartSection} from './App.style'\n\nfunction getBotChoice() {\n    // return Choice.PAPER // For easy testing\n\n    const choices = [Choice.PAPER, Choice.ROCK, Choice.SCISSOR]\n    return choices[Math.ceil(Math.random() * choices.length)]\n}\n\nfunction getMatchResult(playerChoice: Choice, botChoice: Choice) {\n    if (playerChoice === botChoice) {\n        return MatchResult.DRAW\n    }\n\n    if (playerChoice - botChoice === 1 || playerChoice - botChoice === -2) {\n        return MatchResult.WIN\n    }\n\n    return MatchResult.LOSE\n}\n\nfunction gameLogicReducer(state: GameState, action: Action): GameState {\n    switch (action.type) {\n        case ActionType.RESTART:\n            return defaultState\n\n        case ActionType.NEXT_ROUND:\n            if (state.clothes === 0) {\n                return {...state, screen: GameScreen.GAME_OVER_WIN}\n            }\n\n            const videoUrl = `/videos/${state.clothes}.mp4`\n            return {...state, videoUrl, screen: GameScreen.CHOICE}\n\n        case ActionType.CHOICE: {\n            const playerChoice = action.choice\n            const botChoice = getBotChoice()\n            const matchResult = getMatchResult(playerChoice, botChoice)\n\n            return {...state, playerChoice, botChoice, matchResult, screen: GameScreen.RESULT}\n        }\n\n        case ActionType.CALCULATE:\n            if (state.screen !== GameScreen.RESULT) {\n                return state\n            }\n\n            const matchResult = state.matchResult\n            switch (matchResult) {\n                case MatchResult.WIN:\n                    const clothes = state.clothes - 1\n                    return {...state, clothes, screen: GameScreen.STRIP_VIDEO}\n                case MatchResult.LOSE:\n                    const heart = state.heart - 1\n                    if (heart === 0) {\n                        return {...state, heart, screen: GameScreen.GAME_OVER_LOSE}\n                    }\n                    return {...state, heart, screen: GameScreen.CHOICE}\n                case MatchResult.DRAW:\n                    return {...state, screen: GameScreen.CHOICE}\n            }\n    }\n    return state\n}\n\nfunction App() {\n    const [state, dispatch] = React.useReducer(gameLogicReducer, defaultState)\n\n    const context: ContextValue = {\n        state,\n        dispatch,\n    }\n\n    const clothes = (\n        <img className=\"clothes\" alt=\"clothes\" src=\"https://img.icons8.com/emoji/96/000000/womans-clothes.png\" />\n    )\n    const clothesArray: JSX.Element[] = new Array(state.clothes)\n    clothesArray.fill(clothes)\n\n    const heart = <img alt=\"heart\" className=\"heart\" src=\"https://img.icons8.com/plasticine/100/000000/like--v1.png\" />\n    const emptyHeart = (\n        <img alt=\"empty-heart\" className=\"heart\" src=\"https://img.icons8.com/plasticine/100/000000/like--v2.png\" />\n    )\n    const heartArray: JSX.Element[] = new Array(defaultState.heart)\n    heartArray.fill(heart, 0, state.heart)\n    heartArray.fill(emptyHeart, state.heart)\n\n    return (\n        <AppContext.Provider value={context}>\n            <Container>\n                <ClothesSection>{clothesArray}</ClothesSection>\n                <HeartSection>{heartArray}</HeartSection>\n\n                <Video\n                    play={state.screen === GameScreen.STRIP_VIDEO}\n                    videoUrl={state.videoUrl}\n                    onVideoEnded={() => dispatch({type: ActionType.NEXT_ROUND})}></Video>\n\n                {state.screen === GameScreen.CHOICE && <ChoiceScreen />}\n                {state.screen === GameScreen.RESULT && <ResultScreen />}\n                {state.screen === GameScreen.STRIP_VIDEO && <VideoScreen />}\n\n                {state.screen === GameScreen.GAME_OVER_WIN && <GameOverScreen screen={state.screen} />}\n                {state.screen === GameScreen.GAME_OVER_LOSE && <GameOverScreen screen={state.screen} />}\n            </Container>\n        </AppContext.Provider>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\n\nimport App from './App/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}